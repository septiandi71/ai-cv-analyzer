{
  "info": {
    "name": "AI CV Analyzer API",
    "description": "Collection for testing AI CV Analyzer backend API with file upload and async evaluation.\n\n**Upload CV & Project Report dalam satu request, lalu mulai evaluation.**",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "ai-cv-analyzer"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        },
        "description": "Health check endpoint to verify API is running"
      },
      "response": []
    },
    {
      "name": "1. Upload CV & Project Report",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response",
              "const response = pm.response.json();",
              "",
              "// Test status code",
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "// Test response structure",
              "pm.test(\"Response has uploaded files\", function () {",
              "    pm.expect(response.uploadedFiles).to.be.an('array');",
              "    pm.expect(response.uploadedFiles.length).to.equal(2);",
              "});",
              "",
              "// Save file IDs to environment",
              "if (response.uploadedFiles && response.uploadedFiles.length === 2) {",
              "    // Find CV and Project Report by file type",
              "    const cvFile = response.uploadedFiles.find(f => f.fileType === 'CV');",
              "    const projectFile = response.uploadedFiles.find(f => f.fileType === 'PROJECT_REPORT');",
              "    ",
              "    if (cvFile) {",
              "        pm.environment.set('cvFileId', cvFile.id);",
              "        console.log('‚úÖ CV File ID saved:', cvFile.id);",
              "        console.log('   Original filename:', cvFile.originalFilename);",
              "        console.log('   File size:', cvFile.fileSize, 'bytes');",
              "    }",
              "    ",
              "    if (projectFile) {",
              "        pm.environment.set('projectReportFileId', projectFile.id);",
              "        console.log('‚úÖ Project Report File ID saved:', projectFile.id);",
              "        console.log('   Original filename:', projectFile.originalFilename);",
              "        console.log('   File size:', projectFile.fileSize, 'bytes');",
              "    }",
              "    ",
              "    console.log('\\nüìã File IDs tersimpan di environment variables:');",
              "    console.log('   - cvFileId:', pm.environment.get('cvFileId'));",
              "    console.log('   - projectReportFileId:', pm.environment.get('projectReportFileId'));",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "cv",
              "type": "file",
              "src": "/Users/pindepin/Documents/pin/ai-cv-analyzer/test-data/CV Devin 250825.pdf",
              "description": "CV file (PDF format, max 10MB)"
            },
            {
              "key": "project_report",
              "type": "file",
              "src": "/Users/pindepin/Documents/pin/ai-cv-analyzer/test-data/project-report.pdf",
              "description": "Project Report file (PDF format, max 10MB)"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/upload",
          "host": ["{{baseUrl}}"],
          "path": ["upload"]
        },
        "description": "**Upload CV dan Project Report dalam satu request.**\n\nKedua file wajib disertakan (PDF format).\n\n**Request:**\n- `cv` (file): CV kandidat dalam format PDF\n- `project_report` (file): Project report dalam format PDF\n\n**Response:**\n```json\n{\n  \"uploadedFiles\": [\n    {\n      \"id\": \"uuid-cv\",\n      \"originalFilename\": \"cv.pdf\",\n      \"fileType\": \"CV\",\n      \"storedFilename\": \"uuid.pdf\",\n      \"filePath\": \"/path/to/cv.pdf\",\n      \"fileSize\": 123456,\n      \"mimeType\": \"application/pdf\",\n      \"uploadedAt\": \"2025-10-06T...\"\n    },\n    {\n      \"id\": \"uuid-project\",\n      \"originalFilename\": \"project-report.pdf\",\n      \"fileType\": \"PROJECT_REPORT\",\n      \"storedFilename\": \"uuid.pdf\",\n      \"filePath\": \"/path/to/project.pdf\",\n      \"fileSize\": 234567,\n      \"mimeType\": \"application/pdf\",\n      \"uploadedAt\": \"2025-10-06T...\"\n    }\n  ],\n  \"message\": \"2 file(s) uploaded successfully\"\n}\n```\n\n**File IDs akan otomatis disimpan ke environment variables:**\n- `cvFileId`\n- `projectReportFileId`\n\nGunakan file IDs ini untuk request evaluation di step berikutnya."
      },
      "response": []
    },
    {
      "name": "2. Start Evaluation (Create Job)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response",
              "const response = pm.response.json();",
              "",
              "// Test status code",
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "// Test response structure",
              "pm.test(\"Response has job ID\", function () {",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('status');",
              "});",
              "",
              "// Test initial status is QUEUED",
              "pm.test(\"Job status is QUEUED\", function () {",
              "    pm.expect(response.status).to.equal('QUEUED');",
              "});",
              "",
              "// Save evaluation job ID to environment",
              "if (response.id) {",
              "    pm.environment.set('evaluationJobId', response.id);",
              "    console.log('‚úÖ Evaluation Job ID saved:', response.id);",
              "    console.log('üìä Job Status:', response.status);",
              "    console.log('üíº Job Title:', response.jobTitle);",
              "    console.log('üìÑ CV File ID:', response.cvFileId);",
              "    console.log('üìë Project Report File ID:', response.projectReportFileId);",
              "    console.log('');",
              "    console.log('‚è≥ Job sedang diproses di background queue...');",
              "    console.log('   Gunakan endpoint \"Get Evaluation Status\" untuk cek progress.');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jobTitle\": \"Senior Backend Developer\",\n  \"cvFileId\": \"{{cvFileId}}\",\n  \"projectReportFileId\": \"{{projectReportFileId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/evaluate",
          "host": ["{{baseUrl}}"],
          "path": ["evaluate"]
        },
        "description": "**Start CV and Project Report evaluation.**\n\nMembuat async job untuk evaluasi CV dan project report menggunakan AI/LLM.\n\n**Request Body:**\n```json\n{\n  \"jobTitle\": \"Senior Backend Developer\",\n  \"cvFileId\": \"uuid-from-upload\",\n  \"projectReportFileId\": \"uuid-from-upload\"\n}\n```\n\n**Response:**\n```json\n{\n  \"id\": \"job-uuid\",\n  \"status\": \"QUEUED\",\n  \"jobTitle\": \"Senior Backend Developer\",\n  \"cvFileId\": \"uuid-cv\",\n  \"projectReportFileId\": \"uuid-project\",\n  \"createdAt\": \"2025-10-06T...\"\n}\n```\n\n**Job Status Flow:**\n1. `QUEUED` - Job masuk queue, menunggu diproses\n2. `PROCESSING` - Sedang diproses oleh worker\n3. `COMPLETED` - Evaluasi selesai, hasil tersedia\n4. `FAILED` - Terjadi error saat processing\n\n**Job ID akan otomatis disimpan ke environment variable: `evaluationJobId`**"
      },
      "response": []
    },
    {
      "name": "3. Get Evaluation Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response",
              "const response = pm.response.json();",
              "",
              "// Test status code",
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "// If job found, test response structure",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Response has required fields\", function () {",
              "        pm.expect(response).to.have.property('id');",
              "        pm.expect(response).to.have.property('status');",
              "        pm.expect(response).to.have.property('jobTitle');",
              "    });",
              "    ",
              "    // Log current status",
              "    console.log('üìä Job Status:', response.status);",
              "    console.log('üíº Job Title:', response.jobTitle);",
              "    console.log('üïê Created At:', response.createdAt);",
              "    ",
              "    if (response.updatedAt) {",
              "        console.log('üïê Updated At:', response.updatedAt);",
              "    }",
              "    ",
              "    // If completed, log results",
              "    if (response.status === 'COMPLETED') {",
              "        console.log('');",
              "        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');",
              "        console.log('‚úÖ EVALUATION COMPLETED');",
              "        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');",
              "        console.log('');",
              "        console.log('üìÑ CV EVALUATION:');",
              "        console.log('   Match Rate:', response.cvMatchRate + '%');",
              "        console.log('   Feedback:', response.cvFeedback);",
              "        if (response.cvScoresJson) {",
              "            console.log('   Detailed Scores:', JSON.stringify(response.cvScoresJson, null, 2));",
              "        }",
              "        console.log('');",
              "        console.log('üìë PROJECT EVALUATION:');",
              "        console.log('   Score:', response.projectScore + '/100');",
              "        console.log('   Feedback:', response.projectFeedback);",
              "        if (response.projectScoresJson) {",
              "            console.log('   Detailed Scores:', JSON.stringify(response.projectScoresJson, null, 2));",
              "        }",
              "        console.log('');",
              "        console.log('üìù OVERALL SUMMARY:');",
              "        console.log('   ', response.overallSummary);",
              "        console.log('');",
              "        console.log('ü§ñ LLM INFO:');",
              "        console.log('   Provider:', response.llmProvider);",
              "        console.log('   Model:', response.llmModel);",
              "        console.log('   Tokens Used:', response.tokensUsed);",
              "        console.log('   Processing Time:', response.processingTimeMs, 'ms');",
              "        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');",
              "    } else if (response.status === 'PROCESSING') {",
              "        console.log('‚è≥ Job masih dalam proses...');",
              "        console.log('   Tunggu beberapa saat dan coba lagi.');",
              "    } else if (response.status === 'QUEUED') {",
              "        console.log('‚è≥ Job masih dalam antrian...');",
              "        console.log('   Tunggu beberapa saat dan coba lagi.');",
              "    } else if (response.status === 'FAILED') {",
              "        console.log('‚ùå Job FAILED');",
              "        if (response.errorMessage) {",
              "            console.log('   Error:', response.errorMessage);",
              "        }",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/result/{{evaluationJobId}}",
          "host": ["{{baseUrl}}"],
          "path": ["result", "{{evaluationJobId}}"]
        },
        "description": "**Get evaluation job status and results.**\n\nEndpoint ini untuk polling status evaluation job.\n\n**Job Status:**\n- `QUEUED` - Job masuk queue, belum diproses\n- `PROCESSING` - Sedang diproses oleh background worker\n- `COMPLETED` - Evaluasi selesai, hasil tersedia\n- `FAILED` - Terjadi error\n\n**Response (QUEUED/PROCESSING):**\n```json\n{\n  \"id\": \"job-uuid\",\n  \"status\": \"PROCESSING\",\n  \"jobTitle\": \"Senior Backend Developer\",\n  \"cvFileId\": \"uuid-cv\",\n  \"projectReportFileId\": \"uuid-project\",\n  \"createdAt\": \"2025-10-06T...\",\n  \"updatedAt\": \"2025-10-06T...\"\n}\n```\n\n**Response (COMPLETED):**\n```json\n{\n  \"id\": \"job-uuid\",\n  \"status\": \"COMPLETED\",\n  \"jobTitle\": \"Senior Backend Developer\",\n  \"cvFileId\": \"uuid-cv\",\n  \"projectReportFileId\": \"uuid-project\",\n  \"cvMatchRate\": 85,\n  \"cvFeedback\": \"Kandidat memiliki pengalaman yang relevan...\",\n  \"cvScoresJson\": {\n    \"technical_skills\": 90,\n    \"experience\": 85,\n    \"education\": 80\n  },\n  \"projectScore\": 88,\n  \"projectFeedback\": \"Project menunjukkan pemahaman yang baik...\",\n  \"projectScoresJson\": {\n    \"technical_implementation\": 90,\n    \"architecture\": 88,\n    \"best_practices\": 85\n  },\n  \"overallSummary\": \"Kandidat sangat qualified...\",\n  \"llmProvider\": \"gemini\",\n  \"llmModel\": \"gemini-1.5-flash\",\n  \"tokensUsed\": 2500,\n  \"processingTimeMs\": 3500,\n  \"createdAt\": \"2025-10-06T...\",\n  \"updatedAt\": \"2025-10-06T...\",\n  \"completedAt\": \"2025-10-06T...\"\n}\n```\n\n**Tips:**\n- Poll endpoint ini setiap 2-5 detik untuk cek progress\n- Jika status masih QUEUED/PROCESSING, tunggu dan coba lagi\n- Jika COMPLETED, full evaluation results akan tersedia"
      },
      "response": []
    },
    {
      "name": "Get Evaluation Result (Manual ID)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response",
              "const response = pm.response.json();",
              "",
              "// Test status code",
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "// If job found, log details",
              "if (pm.response.code === 200) {",
              "    console.log('üìä Job Status:', response.status);",
              "    console.log('üíº Job Title:', response.jobTitle);",
              "    ",
              "    if (response.status === 'COMPLETED') {",
              "        console.log('');",
              "        console.log('‚úÖ EVALUATION COMPLETED');",
              "        console.log('CV Match Rate:', response.cvMatchRate + '%');",
              "        console.log('Project Score:', response.projectScore + '/100');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/result/:jobId",
          "host": ["{{baseUrl}}"],
          "path": ["result", ":jobId"],
          "variable": [
            {
              "key": "jobId",
              "value": "",
              "description": "Evaluation Job ID (replace with actual UUID)"
            }
          ]
        },
        "description": "**Get evaluation result by manual job ID.**\n\nGunakan endpoint ini jika Anda ingin cek hasil evaluasi dengan job ID yang sudah Anda ketahui.\n\nReplace `:jobId` di URL dengan UUID job yang valid."
      },
      "response": []
    }
  ]
}
