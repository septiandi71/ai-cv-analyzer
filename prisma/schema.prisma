// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

// Status untuk evaluation job
enum EvaluationStatus {
  QUEUED      // Job baru masuk queue
  PROCESSING  // Sedang diproses oleh worker
  COMPLETED   // Selesai dengan sukses
  FAILED      // Gagal setelah retry
}

// Tipe dokumen yang diupload
enum FileType {
  CV
  PROJECT_REPORT
}

// ============================================================================
// MODELS
// ============================================================================

// Model untuk file yang diupload (CV atau Project Report)
model UploadedFile {
  id               String   @id @default(uuid())
  type             FileType // CV atau PROJECT_REPORT
  
  // File metadata
  originalFilename String
  storedFilename   String   @unique // Filename di storage
  filePath         String   // Full path ke file
  mimeType         String   // application/pdf
  fileSize         Int      // Size in bytes
  
  // Extracted content (PENTING untuk RAG!)
  extractedText    String   @db.Text // Text dari PDF
  pageCount        Int      @default(0)
  
  // Relations
  jobsAsCv              EvaluationJob[] @relation("CvFiles")
  jobsAsProjectReport   EvaluationJob[] @relation("ProjectReportFiles")
  
  // Timestamps
  createdAt        DateTime @default(now())
  
  @@map("uploaded_files")
  @@index([type])
  @@index([createdAt])
}

// Model utama untuk evaluation job (MERGED dengan result)
model EvaluationJob {
  id        String            @id @default(uuid())
  status    EvaluationStatus  @default(QUEUED)
  jobTitle  String            // Job title dari input user
  
  // Foreign keys
  cvFileId            String
  projectReportFileId String
  
  // Relations
  cvFile              UploadedFile @relation("CvFiles", fields: [cvFileId], references: [id], onDelete: Cascade)
  projectReportFile   UploadedFile @relation("ProjectReportFiles", fields: [projectReportFileId], references: [id], onDelete: Cascade)
  
  // ========================================================================
  // EVALUATION RESULTS (nullable, diisi saat COMPLETED)
  // ========================================================================
  
  // --- CV Evaluation ---
  cvMatchRate     Float?  // 0.0 - 1.0
  cvFeedback      String? @db.Text
  cvScoresJson    Json?   // Detailed breakdown: technical, experience, achievements, cultural
  
  // --- Project Evaluation ---
  projectScore    Float?  // 1.0 - 5.0
  projectFeedback String? @db.Text
  projectScoresJson Json? // Detailed breakdown: correctness, quality, resilience, docs, creativity
  
  // --- Overall Summary ---
  overallSummary  String? @db.Text
  
  // ========================================================================
  // METADATA & TRACKING
  // ========================================================================
  
  // LLM metadata
  llmProvider     String? // gemini/openrouter
  llmModel        String? // gemini-1.5-flash
  tokensUsed      Int?    // Total tokens consumed
  
  // Performance tracking
  processingTimeMs Int?   // Processing time in milliseconds
  
  // Error tracking
  error           String? @db.Text // Error message if FAILED
  attempts        Int     @default(0) // Retry attempts
  
  // Timestamps
  createdAt       DateTime  @default(now())
  startedAt       DateTime? // When processing started
  completedAt     DateTime? // When completed/failed
  
  @@map("evaluation_jobs")
  @@index([status])
  @@index([createdAt])
  @@index([cvFileId])
  @@index([projectReportFileId])
}
